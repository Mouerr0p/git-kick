/* eslint-disable no-unused-vars */
"use strict";

const TAG_RSCP_REQ_AUTHENTICATION = 0x00000001;
const TAG_RSCP_AUTHENTICATION_USER = 0x00000002;
const TAG_RSCP_AUTHENTICATION_PASSWORD = 0x00000003;
const TAG_RSCP_AUTHENTICATION = 0x00800001;
const TAG_RSCP_REQ_USER_LEVEL = 0x00000004;
const TAG_RSCP_USER_LEVEL = 0x00800004;
const TAG_RSCP_REQ_SET_ENCRYPTION_PASSPHRASE = 0x00000005;
const TAG_RSCP_SET_ENCRYPTION_PASSPHRASE = 0x00800005;
const TAG_RSCP_GENERAL_ERROR = 0x00FFFFFF;
const TAG_EMS_REQ_POWER_PV = 0x01000001;
const TAG_EMS_REQ_POWER_BAT = 0x01000002;
const TAG_EMS_REQ_POWER_HOME = 0x01000003;
const TAG_EMS_REQ_POWER_GRID = 0x01000004;
const TAG_EMS_REQ_POWER_ADD = 0x01000005;
const TAG_EMS_REQ_AUTARKY = 0x01000006;
const TAG_EMS_REQ_SELF_CONSUMPTION = 0x01000007;
const TAG_EMS_REQ_BAT_SOC = 0x01000008;
const TAG_EMS_REQ_COUPLING_MODE = 0x01000009;
const TAG_EMS_REQ_STORED_ERRORS = 0x0100000A;
const TAG_EMS_REQ_MODE = 0x01000011;
const TAG_EMS_REQ_BALANCED_PHASES = 0x01000012;
const TAG_EMS_REQ_INSTALLED_PEAK_POWER = 0x01000013;
const TAG_EMS_REQ_DERATE_AT_PERCENT_VALUE = 0x01000014;
const TAG_EMS_REQ_DERATE_AT_POWER_VALUE = 0x01000015;
const TAG_EMS_REQ_ERROR_BUZZER_ENABLED = 0x01000016;
const TAG_EMS_REQ_SET_BALANCED_PHASES = 0x01000017;
const TAG_EMS_REQ_SET_INSTALLED_PEAK_POWER = 0x01000018;
const TAG_EMS_REQ_SET_DERATE_PERCENT = 0x01000019;
const TAG_EMS_REQ_SET_ERROR_BUZZER_ENABLED = 0x0100001A;
const TAG_EMS_REQ_START_ADJUST_BATTERY_VOLTAGE = 0x0100001B;
const TAG_EMS_REQ_CANCEL_ADJUST_BATTERY_VOLTAGE = 0x0100001C;
const TAG_EMS_REQ_ADJUST_BATTERY_VOLTAGE_STATUS = 0x0100001D;
const TAG_EMS_REQ_CONFIRM_ERRORS = 0x0100001E;
const TAG_EMS_REQ_POWER_WB_ALL = 0x0100001F;
const TAG_EMS_REQ_POWER_WB_SOLAR = 0x01000020;
const TAG_EMS_REQ_EXT_SRC_AVAILABLE = 0x01000021;
const TAG_EMS_POWER_PV = 0x01800001;
const TAG_EMS_POWER_BAT = 0x01800002;
const TAG_EMS_POWER_HOME = 0x01800003;
const TAG_EMS_POWER_GRID = 0x01800004;
const TAG_EMS_POWER_ADD = 0x01800005;
const TAG_EMS_AUTARKY = 0x01800006;
const TAG_EMS_SELF_CONSUMPTION = 0x01800007;
const TAG_EMS_BAT_SOC = 0x01800008;
const TAG_EMS_COUPLING_MODE = 0x01800009;
const TAG_EMS_STORED_ERRORS = 0x0180000A;
const TAG_EMS_ERROR_CONTAINER = 0x0180000B;
const TAG_EMS_ERROR_TYPE = 0x0180000C;
const TAG_EMS_ERROR_SOURCE = 0x0180000D;
const TAG_EMS_ERROR_MESSAGE = 0x0180000E;
const TAG_EMS_ERROR_CODE = 0x0180000F;
const TAG_EMS_ERROR_TIMESTAMP = 0x01800010;
const TAG_EMS_MODE = 0x01800011;
const TAG_EMS_BALANCED_PHASES = 0x01800012;
const TAG_EMS_INSTALLED_PEAK_POWER = 0x01800013;
const TAG_EMS_DERATE_AT_PERCENT_VALUE = 0x01800014;
const TAG_EMS_DERATE_AT_POWER_VALUE = 0x01800015;
const TAG_EMS_ERROR_BUZZER_ENABLED = 0x01800016;
const TAG_EMS_SET_BALANCED_PHASES = 0x01800017;
const TAG_EMS_SET_INSTALLED_PEAK_POWER = 0x01800018;
const TAG_EMS_SET_DERATE_PERCENT = 0x01800019;
const TAG_EMS_SET_ERROR_BUZZER_ENABLED = 0x0180001A;
const TAG_EMS_START_ADJUST_BATTERY_VOLTAGE = 0x0180001B;
const TAG_EMS_CANCEL_ADJUST_BATTERY_VOLTAGE = 0x0180001C;
const TAG_EMS_ADJUST_BATTERY_VOLTAGE_STATUS = 0x0180001D;
const TAG_EMS_CONFIRM_ERRORS = 0x0180001E;
const TAG_EMS_POWER_WB_ALL = 0x0180001F;
const TAG_EMS_POWER_WB_SOLAR = 0x01800020;
const TAG_EMS_EXT_SRC_AVAILABLE = 0x01800021;
const TAG_EMS_REQ_SET_POWER = 0x01000030;
const TAG_EMS_REQ_SET_POWER_MODE = 0x01000031;
const TAG_EMS_REQ_SET_POWER_VALUE = 0x01000032;
const TAG_EMS_SET_POWER = 0x01800030;
const TAG_EMS_REQ_STATUS = 0x01000040;
const TAG_EMS_STATUS = 0x01800040;
const TAG_EMS_REQ_USED_CHARGE_LIMIT = 0x01000041;
const TAG_EMS_REQ_BAT_CHARGE_LIMIT = 0x01000042;
const TAG_EMS_REQ_DCDC_CHARGE_LIMIT = 0x01000043;
const TAG_EMS_REQ_USER_CHARGE_LIMIT = 0x01000044;
const TAG_EMS_REQ_USED_DISCHARGE_LIMIT = 0x01000045;
const TAG_EMS_REQ_BAT_DISCHARGE_LIMIT = 0x01000046;
const TAG_EMS_REQ_DCDC_DISCHARGE_LIMIT = 0x01000047;
const TAG_EMS_REQ_USER_DISCHARGE_LIMIT = 0x01000048;
const TAG_EMS_USED_CHARGE_LIMIT = 0x01800041;
const TAG_EMS_BAT_CHARGE_LIMIT = 0x01800042;
const TAG_EMS_DCDC_CHARGE_LIMIT = 0x01800043;
const TAG_EMS_USER_CHARGE_LIMIT = 0x01800044;
const TAG_EMS_USED_DISCHARGE_LIMIT = 0x01800045;
const TAG_EMS_BAT_DISCHARGE_LIMIT = 0x01800046;
const TAG_EMS_DCDC_DISCHARGE_LIMIT = 0x01800047;
const TAG_EMS_USER_DISCHARGE_LIMIT = 0x01800048;
const TAG_EMS_REQ_SET_POWER_CONTROL_OFFSET = 0x01000060;
const TAG_EMS_SET_POWER_CONTROL_OFFSET = 0x01800060;
const TAG_EMS_REQ_REMAINING_BAT_CHARGE_POWER = 0x01000071;
const TAG_EMS_REMAINING_BAT_CHARGE_POWER = 0x01800071;
const TAG_EMS_REQ_REMAINING_BAT_DISCHARGE_POWER = 0x01000072;
const TAG_EMS_REMAINING_BAT_DISCHARGE_POWER = 0x01800072;
const TAG_EMS_REQ_EMERGENCY_POWER_STATUS = 0x01000073;
const TAG_EMS_EMERGENCY_POWER_STATUS = 0x01800073;
const TAG_EMS_REQ_SET_EMERGENCY_POWER = 0x01000074;
const TAG_EMS_SET_EMERGENCY_POWER = 0x01800074;
const TAG_EMS_REQ_SET_OVERRIDE_AVAILABLE_POWER = 0x01000075;
const TAG_EMS_SET_OVERRIDE_AVAILABLE_POWER = 0x01800075;
const TAG_EMS_SET_BATTERY_TO_CAR_MODE = 0x01800076;
const TAG_EMS_REQ_SET_BATTERY_TO_CAR_MODE = 0x01000076;
const TAG_EMS_BATTERY_TO_CAR_MODE = 0x01800077;
const TAG_EMS_REQ_BATTERY_TO_CAR_MODE = 0x01000077;
const TAG_EMS_SET_BATTERY_BEFORE_CAR_MODE = 0x01800078;
const TAG_EMS_REQ_SET_BATTERY_BEFORE_CAR_MODE = 0x01000078;
const TAG_EMS_BATTERY_BEFORE_CAR_MODE = 0x01800079;
const TAG_EMS_REQ_BATTERY_BEFORE_CAR_MODE = 0x01000079;
const TAG_EMS_REQ_GET_IDLE_PERIODS = 0x01000080;
const TAG_EMS_GET_IDLE_PERIODS = 0x01800080;
const TAG_EMS_REQ_SET_IDLE_PERIODS = 0x01000081;
const TAG_EMS_SET_IDLE_PERIODS = 0x01800081;
const TAG_EMS_IDLE_PERIOD = 0x01000082;
const TAG_EMS_IDLE_PERIOD_TYPE = 0x01000083;
const TAG_EMS_IDLE_PERIOD_DAY = 0x01000084;
const TAG_EMS_IDLE_PERIOD_START = 0x01000085;
const TAG_EMS_IDLE_PERIOD_END = 0x01000086;
const TAG_EMS_IDLE_PERIOD_HOUR = 0x01000087;
const TAG_EMS_IDLE_PERIOD_MINUTE = 0x01000088;
const TAG_EMS_IDLE_PERIOD_ACTIVE = 0x01000089;
const TAG_EMS_REQ_IDLE_PERIOD_CHANGE_MARKER = 0x0100008A;
const TAG_EMS_IDLE_PERIOD_CHANGE_MARKER = 0x0180008A;
const TAG_EMS_REQ_GET_POWER_SETTINGS = 0x0100008B;
const TAG_EMS_GET_POWER_SETTINGS = 0x0180008B;
const TAG_EMS_REQ_SET_POWER_SETTINGS = 0x0100008C;
const TAG_EMS_SET_POWER_SETTINGS = 0x0180008C;
const TAG_EMS_POWER_LIMITS_USED = 0x01000100;
const TAG_EMS_RES_POWER_LIMITS_USED = 0x01800100;
const TAG_EMS_MAX_CHARGE_POWER = 0x01000101;
const TAG_EMS_RES_MAX_CHARGE_POWER = 0x01800101;
const TAG_EMS_MAX_DISCHARGE_POWER = 0x01000102;
const TAG_EMS_RES_MAX_DISCHARGE_POWER = 0x01800102;
const TAG_EMS_DISCHARGE_START_POWER = 0x01000103;
const TAG_EMS_RES_DISCHARGE_START_POWER = 0x01800103;
const TAG_EMS_POWERSAVE_ENABLED = 0x01000104;
const TAG_EMS_RES_POWERSAVE_ENABLED = 0x01800104;
const TAG_EMS_WEATHER_REGULATED_CHARGE_ENABLED = 0x01000105;
const TAG_EMS_RES_WEATHER_REGULATED_CHARGE_ENABLED = 0x01800105;
const TAG_EMS_REQ_SETTINGS_CHANGE_MARKER = 0x0100008D;
const TAG_EMS_SETTINGS_CHANGE_MARKER = 0x0180008D;
const TAG_EMS_REQ_GET_MANUAL_CHARGE = 0x0100008E;
const TAG_EMS_GET_MANUAL_CHARGE = 0x0180008E;
const TAG_EMS_MANUAL_CHARGE_START_COUNTER = 0x01000150;
const TAG_EMS_MANUAL_CHARGE_ACTIVE = 0x01000151;
const TAG_EMS_MANUAL_CHARGE_ENERGY_COUNTER = 0x01000152;
const TAG_EMS_MANUAL_CHARGE_LASTSTART = 0x01000153;
const TAG_EMS_REQ_START_MANUAL_CHARGE = 0x0100008F;
const TAG_EMS_START_MANUAL_CHARGE = 0x0180008F;
const TAG_EMS_REQ_START_EMERGENCYPOWER_TEST = 0x01000090;
const TAG_EMS_START_EMERGENCYPOWER_TEST = 0x01800090;
const TAG_EMS_REQ_GET_GENERATOR_STATE = 0x01000091;
const TAG_EMS_GET_GENERATOR_STATE = 0x01800091;
const TAG_EMS_REQ_SET_GENERATOR_MODE = 0x01000092;
const TAG_EMS_SET_GENERATOR_MODE = 0x01800092;
const TAG_EMS_REQ_EMERGENCYPOWER_TEST_STATUS = 0x01000093;
const TAG_EMS_EMERGENCYPOWER_TEST_STATUS = 0x01800093;
const TAG_EMS_EPTEST_NEXT_TESTSTART = 0x01000094;
const TAG_EMS_EPTEST_START_COUNTER = 0x01000095;
const TAG_EMS_EPTEST_RUNNING = 0x01000096;
const TAG_EMS_REQ_GET_SYS_SPECS = 0x01000097;
const TAG_EMS_GET_SYS_SPECS = 0x01800098;
const TAG_EMS_SYS_SPEC = 0x01000099;
const TAG_EMS_SYS_SPEC_INDEX = 0x0100009A;
const TAG_EMS_SYS_SPEC_NAME = 0x0100009B;
const TAG_EMS_SYS_SPEC_VALUE_INT = 0x0100009C;
const TAG_EMS_SYS_SPEC_VALUE_STRING = 0x0100009D;
const TAG_EMS_REQ_ALIVE = 0x01050000;
const TAG_EMS_ALIVE = 0x01850000;
const TAG_EMS_GENERAL_ERROR = 0x01FFFFFF;
const TAG_BAT_REQ_DATA = 0x03040000;
const TAG_BAT_INDEX = 0x03040001;
const TAG_BAT_DATA = 0x03840000;
const TAG_BAT_RSOC = 0x03800001;
const TAG_BAT_MODULE_VOLTAGE = 0x03800002;
const TAG_BAT_CURRENT = 0x03800003;
const TAG_BAT_MAX_BAT_VOLTAGE = 0x03800004;
const TAG_BAT_MAX_CHARGE_CURRENT = 0x03800005;
const TAG_BAT_EOD_VOLTAGE = 0x03800006;
const TAG_BAT_MAX_DISCHARGE_CURRENT = 0x03800007;
const TAG_BAT_CHARGE_CYCLES = 0x03800008;
const TAG_BAT_TERMINAL_VOLTAGE = 0x03800009;
const TAG_BAT_STATUS_CODE = 0x0380000A;
const TAG_BAT_ERROR_CODE = 0x0380000B;
const TAG_BAT_DEVICE_NAME = 0x0380000C;
const TAG_BAT_DCB_COUNT = 0x0380000D;
const TAG_BAT_MAX_DCB_CELL_TEMPERATURE = 0x03800016;
const TAG_BAT_MIN_DCB_CELL_TEMPERATURE = 0x03800017;
const TAG_BAT_DCB_CELL_TEMPERATURE = 0x03800019;
const TAG_BAT_DCB_CELL_VOLTAGE = 0x0380001B;
const TAG_BAT_READY_FOR_SHUTDOWN = 0x0380001E;
const TAG_BAT_INFO = 0x03800020;
const TAG_BAT_TRAINING_MODE = 0x03800021;
const TAG_BAT_REQ_RSOC = 0x03000001;
const TAG_BAT_REQ_MODULE_VOLTAGE = 0x03000002;
const TAG_BAT_REQ_CURRENT = 0x03000003;
const TAG_BAT_REQ_MAX_BAT_VOLTAGE = 0x03000004;
const TAG_BAT_REQ_MAX_CHARGE_CURRENT = 0x03000005;
const TAG_BAT_REQ_EOD_VOLTAGE = 0x03000006;
const TAG_BAT_REQ_MAX_DISCHARGE_CURRENT = 0x03000007;
const TAG_BAT_REQ_CHARGE_CYCLES = 0x03000008;
const TAG_BAT_REQ_TERMINAL_VOLTAGE = 0x03000009;
const TAG_BAT_REQ_STATUS_CODE = 0x0300000A;
const TAG_BAT_REQ_ERROR_CODE = 0x0300000B;
const TAG_BAT_REQ_DEVICE_NAME = 0x0300000C;
const TAG_BAT_REQ_DCB_COUNT = 0x0300000D;
const TAG_BAT_REQ_MAX_DCB_CELL_TEMPERATURE = 0x03000016;
const TAG_BAT_REQ_MIN_DCB_CELL_TEMPERATURE = 0x03000017;
const TAG_BAT_REQ_READY_FOR_SHUTDOWN = 0x0300001E;
const TAG_BAT_REQ_INFO = 0x03000020;
const TAG_BAT_REQ_TRAINING_MODE = 0x03000021;
const TAG_BAT_DCB_INDEX = 0x03800100;
const TAG_BAT_DCB_LAST_MESSAGE_TIMESTAMP = 0x03800101;
const TAG_BAT_DCB_MAX_CHARGE_VOLTAGE = 0x03800102;
const TAG_BAT_DCB_MAX_CHARGE_CURRENT = 0x03800103;
const TAG_BAT_DCB_END_OF_DISCHARGE = 0x03800104;
const TAG_BAT_DCB_MAX_DISCHARGE_CURRENT = 0x03800105;
const TAG_BAT_DCB_FULL_CHARGE_CAPACITY = 0x03800106;
const TAG_BAT_DCB_REMAINING_CAPACITY = 0x03800107;
const TAG_BAT_DCB_SOC = 0x03800108;
const TAG_BAT_DCB_SOH = 0x03800109;
const TAG_BAT_DCB_CYCLE_COUNT = 0x03800110;
const TAG_BAT_DCB_CURRENT = 0x03800111;
const TAG_BAT_DCB_VOLTAGE = 0x03800112;
const TAG_BAT_DCB_CURRENT_AVG_30S = 0x03800113;
const TAG_BAT_DCB_VOLTAGE_AVG_30S = 0x03800114;
const TAG_BAT_DCB_DESIGN_CAPACITY = 0x03800115;
const TAG_BAT_DCB_DESIGN_VOLTAGE = 0x03800116;
const TAG_BAT_DCB_CHARGE_LOW_TEMPERATURE = 0x03800117;
const TAG_BAT_DCB_CHARGE_HIGH_TEMPERATURE = 0x03800118;
const TAG_BAT_DCB_MANUFACTURE_DATE = 0x03800119;
const TAG_BAT_DCB_SERIALNO = 0x03800120;
const TAG_BAT_DCB_PROTOCOL_VERSION = 0x03800121;
const TAG_BAT_DCB_FW_VERSION = 0x03800122;
const TAG_BAT_DCB_DATA_TABLE_VERSION = 0x03800123;
const TAG_BAT_DCB_PCB_VERSION = 0x03800124;
const TAG_BAT_REQ_DEVICE_STATE = 0x03060000;
const TAG_BAT_DEVICE_STATE = 0x03860000;
const TAG_BAT_DEVICE_CONNECTED = 0x03860001;
const TAG_BAT_DEVICE_WORKING = 0x03860002;
const TAG_BAT_DEVICE_IN_SERVICE = 0x03860003;
const TAG_BAT_GENERAL_ERROR = 0x03FFFFFF;
const TAG_PM_REQ_DATA = 0x05040000;
const TAG_PM_INDEX = 0x05040001;
const TAG_PM_DATA = 0x05840000;
const TAG_PM_REQ_POWER_L1 = 0x05000001;
const TAG_PM_REQ_POWER_L2 = 0x05000002;
const TAG_PM_REQ_POWER_L3 = 0x05000003;
const TAG_PM_REQ_ACTIVE_PHASES = 0x05000004;
const TAG_PM_REQ_MODE = 0x05000005;
const TAG_PM_REQ_ENERGY_L1 = 0x05000006;
const TAG_PM_REQ_ENERGY_L2 = 0x05000007;
const TAG_PM_REQ_ENERGY_L3 = 0x05000008;
const TAG_PM_REQ_DEVICE_ID = 0x05000009;
const TAG_PM_REQ_ERROR_CODE = 0x0500000A;
const TAG_PM_REQ_SET_PHASE_ELIMINATION = 0x0500000B;
const TAG_PM_REQ_GET_PHASE_ELIMINATION = 0x05000018;
const TAG_PM_REQ_FIRMWARE_VERSION = 0x0500000C;
const TAG_PM_REQ_VOLTAGE_L1 = 0x05000011;
const TAG_PM_REQ_VOLTAGE_L2 = 0x05000012;
const TAG_PM_REQ_VOLTAGE_L3 = 0x05000013;
const TAG_PM_REQ_TYPE = 0x05000014;
const TAG_PM_POWER_L1 = 0x05800001;
const TAG_PM_POWER_L2 = 0x05800002;
const TAG_PM_POWER_L3 = 0x05800003;
const TAG_PM_ACTIVE_PHASES = 0x05800004;
const TAG_PM_MODE = 0x05800005;
const TAG_PM_ENERGY_L1 = 0x05800006;
const TAG_PM_ENERGY_L2 = 0x05800007;
const TAG_PM_ENERGY_L3 = 0x05800008;
const TAG_PM_DEVICE_ID = 0x05800009;
const TAG_PM_ERROR_CODE = 0x0580000A;
const TAG_PM_SET_PHASE_ELIMINATION = 0x0580000B;
const TAG_PM_GET_PHASE_ELIMINATION = 0x05800018;
const TAG_PM_FIRMWARE_VERSION = 0x0580000C;
const TAG_PM_VOLTAGE_L1 = 0x05800011;
const TAG_PM_VOLTAGE_L2 = 0x05800012;
const TAG_PM_VOLTAGE_L3 = 0x05800013;
const TAG_PM_TYPE = 0x05800014;
const TAG_PM_CS_START_TIME = 0x05800051;
const TAG_PM_CS_LAST_TIME = 0x05800052;
const TAG_PM_CS_SUCC_FRAMES_ALL = 0x05800053;
const TAG_PM_CS_SUCC_FRAMES_100 = 0x05800054;
const TAG_PM_CS_EXP_FRAMES_ALL = 0x05800055;
const TAG_PM_CS_EXP_FRAMES_100 = 0x05800056;
const TAG_PM_CS_ERR_FRAMES_ALL = 0x05800057;
const TAG_PM_CS_ERR_FRAMES_100 = 0x05800058;
const TAG_PM_CS_UNK_FRAMES = 0x05800059;
const TAG_PM_CS_ERR_FRAME = 0x0580005A;
const TAG_PM_REQ_DEVICE_STATE = 0x05060000;
const TAG_PM_DEVICE_STATE = 0x05860000;
const TAG_PM_DEVICE_CONNECTED = 0x05860001;
const TAG_PM_DEVICE_WORKING = 0x05860002;
const TAG_PM_DEVICE_IN_SERVICE = 0x05860003;
const TAG_PM_GENERAL_ERROR = 0x05FFFFFF;
const TAG_DCDC_REQ_DATA = 0x04040000;
const TAG_DCDC_INDEX = 0x04040001;
const TAG_DCDC_DATA = 0x04840000;
const TAG_DCDC_REQ_I_BAT = 0x04000001;
const TAG_DCDC_REQ_U_BAT = 0x04000002;
const TAG_DCDC_REQ_P_BAT = 0x04000003;
const TAG_DCDC_REQ_I_DCL = 0x04000004;
const TAG_DCDC_REQ_U_DCL = 0x04000005;
const TAG_DCDC_REQ_P_DCL = 0x04000006;
const TAG_DCDC_REQ_FIRMWARE_VERSION = 0x04000008;
const TAG_DCDC_REQ_FPGA_FIRMWARE = 0x04000009;
const TAG_DCDC_REQ_SERIAL_NUMBER = 0x0400000A;
const TAG_DCDC_REQ_BOARD_VERSION = 0x0400000B;
const TAG_DCDC_REQ_FLASH_FILE_LIST = 0x0400000C;
const TAG_DCDC_REQ_IS_FLASHING = 0x0400000E;
const TAG_DCDC_REQ_FLASH = 0x0400000F;
const TAG_DCDC_REQ_STATUS = 0x04000010;
const TAG_DCDC_REQ_STATUS_AS_STRING = 0x04000013;
const TAG_DCDC_I_BAT = 0x04800001;
const TAG_DCDC_U_BAT = 0x04800002;
const TAG_DCDC_P_BAT = 0x04800003;
const TAG_DCDC_I_DCL = 0x04800004;
const TAG_DCDC_U_DCL = 0x04800005;
const TAG_DCDC_P_DCL = 0x04800006;
const TAG_DCDC_FIRMWARE_VERSION = 0x04800008;
const TAG_DCDC_FPGA_FIRMWARE = 0x04800009;
const TAG_DCDC_SERIAL_NUMBER = 0x0480000A;
const TAG_DCDC_BOARD_VERSION = 0x0480000B;
const TAG_DCDC_FLASH_FILE_LIST = 0x0480000C;
const TAG_DCDC_FLASH_FILE = 0x0480000D;
const TAG_DCDC_IS_FLASHING = 0x0480000E;
const TAG_DCDC_FLASH = 0x0480000F;
const TAG_DCDC_STATUS = 0x04800010;
const TAG_DCDC_STATE = 0x04800011;
const TAG_DCDC_SUBSTATE = 0x04800012;
const TAG_DCDC_STATUS_AS_STRING = 0x04800013;
const TAG_DCDC_STATE_AS_STRING = 0x04800014;
const TAG_DCDC_SUBSTATE_AS_STRING = 0x04800015;
const TAG_DCDC_REQ_DEVICE_STATE = 0x04060000;
const TAG_DCDC_DEVICE_STATE = 0x04860000;
const TAG_DCDC_DEVICE_CONNECTED = 0x04860001;
const TAG_DCDC_DEVICE_WORKING = 0x04860002;
const TAG_DCDC_DEVICE_IN_SERVICE = 0x04860003;
const TAG_DCDC_GENERAL_ERROR = 0x04FFFFFF;
const TAG_PVI_DATA = 0x02840000;
const TAG_PVI_REQ_DATA = 0x02040000;
const TAG_PVI_INDEX = 0x02040001;
const TAG_PVI_VALUE = 0x02040005;
const TAG_PVI_GENERAL_ERROR = 0x02FFFFFF;
const TAG_PVI_ON_GRID = 0x02800001;
const TAG_PVI_REQ_ON_GRID = 0x02000001;
const TAG_PVI_STATE = 0x02800002;
const TAG_PVI_REQ_STATE = 0x02000002;
const TAG_PVI_LAST_ERROR = 0x02800003;
const TAG_PVI_REQ_LAST_ERROR = 0x02000003;
const TAG_PVI_FLASH_FILE = 0x02800007;
const TAG_PVI_REQ_DEVICE_STATE = 0x02060000;
const TAG_PVI_DEVICE_STATE = 0x02860000;
const TAG_PVI_DEVICE_CONNECTED = 0x02860001;
const TAG_PVI_DEVICE_WORKING = 0x02860002;
const TAG_PVI_DEVICE_IN_SERVICE = 0x02860003;
const TAG_PVI_REQ_TYPE = 0x02000009;
const TAG_PVI_TYPE = 0x02800009;
const TAG_PVI_COS_PHI = 0x02800060;
const TAG_PVI_REQ_COS_PHI = 0x02000060;
const TAG_PVI_REQ_SET_COS_PHI = 0x02000061;
const TAG_PVI_COS_PHI_VALUE = 0x02000062;
const TAG_PVI_COS_PHI_IS_AKTIV = 0x02000063;
const TAG_PVI_COS_PHI_EXCITED = 0x02000064;
const TAG_PVI_VOLTAGE_MONITORING = 0x02800070;
const TAG_PVI_REQ_VOLTAGE_MONITORING = 0x02000070;
const TAG_PVI_VOLTAGE_MONITORING_THRESHOLD_TOP = 0x02000072;
const TAG_PVI_VOLTAGE_MONITORING_THRESHOLD_BOTTOM = 0x02000073;
const TAG_PVI_VOLTAGE_MONITORING_SLOPE_UP = 0x02000074;
const TAG_PVI_VOLTAGE_MONITORING_SLOPE_DOWN = 0x02000075;
const TAG_PVI_FREQUENCY_UNDER_OVER = 0x02800080;
const TAG_PVI_REQ_FREQUENCY_UNDER_OVER = 0x02000080;
const TAG_PVI_FREQUENCY_UNDER = 0x02000082;
const TAG_PVI_FREQUENCY_OVER = 0x02000083;
const TAG_PVI_SYSTEM_MODE = 0x02800085;
const TAG_PVI_REQ_SYSTEM_MODE = 0x02000085;
const TAG_PVI_POWER_MODE = 0x02800087;
const TAG_PVI_REQ_POWER_MODE = 0x02000087;
const TAG_PVI_TEMPERATURE = 0x02800100;
const TAG_PVI_REQ_TEMPERATURE = 0x02000100;
const TAG_PVI_TEMPERATURE_COUNT = 0x02800101;
const TAG_PVI_REQ_TEMPERATURE_COUNT = 0x02000101;
const TAG_PVI_MAX_TEMPERATURE = 0x02800102;
const TAG_PVI_REQ_MAX_TEMPERATURE = 0x02000102;
const TAG_PVI_MIN_TEMPERATURE = 0x02800103;
const TAG_PVI_REQ_MIN_TEMPERATURE = 0x02000103;
const TAG_PVI_SERIAL_NUMBER = 0x028ABC01;
const TAG_PVI_REQ_SERIAL_NUMBER = 0x020ABC01;
const TAG_PVI_VERSION = 0x028ABC02;
const TAG_PVI_REQ_VERSION = 0x020ABC02;
const TAG_PVI_VERSION_MAIN = 0x020ABC03;
const TAG_PVI_VERSION_PIC = 0x020ABC04;
const TAG_PVI_AC_MAX_PHASE_COUNT = 0x028AC000;
const TAG_PVI_AC_POWER = 0x028AC001;
const TAG_PVI_AC_VOLTAGE = 0x028AC002;
const TAG_PVI_AC_CURRENT = 0x028AC003;
const TAG_PVI_AC_APPARENTPOWER = 0x028AC004;
const TAG_PVI_AC_REACTIVEPOWER = 0x028AC005;
const TAG_PVI_AC_ENERGY_ALL = 0x028AC006;
const TAG_PVI_AC_MAX_APPARENTPOWER = 0x028AC007;
const TAG_PVI_AC_ENERGY_DAY = 0x028AC008;
const TAG_PVI_AC_ENERGY_GRID_CONSUMPTION = 0x028AC009;
const TAG_PVI_REQ_AC_MAX_PHASE_COUNT = 0x020AC000;
const TAG_PVI_REQ_AC_POWER = 0x020AC001;
const TAG_PVI_REQ_AC_VOLTAGE = 0x020AC002;
const TAG_PVI_REQ_AC_CURRENT = 0x020AC003;
const TAG_PVI_REQ_AC_APPARENTPOWER = 0x020AC004;
const TAG_PVI_REQ_AC_REACTIVEPOWER = 0x020AC005;
const TAG_PVI_REQ_AC_ENERGY_ALL = 0x020AC006;
const TAG_PVI_REQ_AC_MAX_APPARENTPOWER = 0x020AC007;
const TAG_PVI_REQ_AC_ENERGY_DAY = 0x020AC008;
const TAG_PVI_REQ_AC_ENERGY_GRID_CONSUMPTION = 0x020AC009;
const TAG_PVI_DC_MAX_STRING_COUNT = 0x028DC000;
const TAG_PVI_DC_POWER = 0x028DC001;
const TAG_PVI_DC_VOLTAGE = 0x028DC002;
const TAG_PVI_DC_CURRENT = 0x028DC003;
const TAG_PVI_DC_MAX_POWER = 0x028DC004;
const TAG_PVI_DC_MAX_VOLTAGE = 0x028DC005;
const TAG_PVI_DC_MIN_VOLTAGE = 0x028DC006;
const TAG_PVI_DC_MAX_CURRENT = 0x028DC007;
const TAG_PVI_DC_MIN_CURRENT = 0x028DC008;
const TAG_PVI_DC_STRING_ENERGY_ALL = 0x028DC009;
const TAG_PVI_REQ_DC_MAX_STRING_COUNT = 0x020DC000;
const TAG_PVI_REQ_DC_POWER = 0x020DC001;
const TAG_PVI_REQ_DC_VOLTAGE = 0x020DC002;
const TAG_PVI_REQ_DC_CURRENT = 0x020DC003;
const TAG_PVI_REQ_DC_MAX_POWER = 0x020DC004;
const TAG_PVI_REQ_DC_MAX_VOLTAGE = 0x020DC005;
const TAG_PVI_REQ_DC_MIN_VOLTAGE = 0x020DC006;
const TAG_PVI_REQ_DC_MAX_CURRENT = 0x020DC007;
const TAG_PVI_REQ_DC_MIN_CURRENT = 0x020DC008;
const TAG_PVI_REQ_DC_STRING_ENERGY_ALL = 0x020DC009;
const TAG_HA_REQ_DATAPOINT_LIST = 0x09000001;
const TAG_HA_REQ_ACTUATOR_STATES = 0x09000010;
const TAG_HA_REQ_ADD_ACTUATOR = 0x09000020;
const TAG_HA_REQ_REMOVE_ACTUATOR = 0x09000030;
const TAG_HA_REQ_COMMAND_ACTUATOR = 0x09000040;
const TAG_HA_REQ_COMMAND = 0x09000041;
const TAG_HA_REQ_DESCRIPTIONS_CHANGE = 0x09000050;
const TAG_HA_REQ_CONFIGURATION_CHANGE_COUNTER = 0x09000060;
const TAG_HA_CONFIGURATION_CHANGE_COUNTER = 0x09800060;
const TAG_HA_DATAPOINT_LIST = 0x09800001;
const TAG_HA_DATAPOINT = 0x09800002;
const TAG_HA_DATAPOINT_INDEX = 0x09800003;
const TAG_HA_DATAPOINT_TYPE = 0x09800004;
const TAG_HA_DATAPOINT_NAME = 0x09800005;
const TAG_HA_DATAPOINT_STATE = 0x09800011;
const TAG_HA_DATAPOINT_STATE_TIMESTAMP = 0x09800013;
const TAG_HA_DATAPOINT_STATE_VALUE = 0x09800014;
const TAG_HA_DATAPOINT_SUPPLY_QUALITY = 0x09800015;
const TAG_HA_DATAPOINT_SIGNAL_QUALITY = 0x09800016;
const TAG_HA_DATAPOINT_MODE = 0x09800012;
const TAG_HA_DATAPOINT_DESCRIPTIONS = 0x09800006;
const TAG_HA_DATAPOINT_DESCRIPTION = 0x09800007;
const TAG_HA_DATAPOINT_DESCRIPTION_NAME = 0x09800008;
const TAG_HA_DATAPOINT_DESCRIPTION_VALUE = 0x09800009;
const TAG_HA_ACTUATOR_STATES = 0x09800010;
const TAG_HA_ADD_ACTUATOR = 0x09800020;
const TAG_HA_REMOVE_ACTUATOR = 0x09800030;
const TAG_HA_COMMAND_ACTUATOR = 0x09800040;
const TAG_HA_DESCRIPTIONS_CHANGE = 0x09800050;
const TAG_HA_REQ_DEVICE_STATE = 0x09060000;
const TAG_HA_DEVICE_STATE = 0x09860000;
const TAG_HA_DEVICE_CONNECTED = 0x09860001;
const TAG_HA_DEVICE_WORKING = 0x09860002;
const TAG_HA_DEVICE_IN_SERVICE = 0x09860003;
const TAG_HA_GENERAL_ERROR = 0x09FFFFFF;
const TAG_SRV_REQ_IS_ONLINE = 0x08000001;
const TAG_SRV_IS_ONLINE = 0x08800001;
const TAG_SRV_REQ_ADD_USER = 0x08000002;
const TAG_SRV_ADD_USER = 0x08800002;
const TAG_SRV_GENERAL_ERROR = 0x08FFFFFF;
const TAG_INFO_REQ_SERIAL_NUMBER = 0x0A000001;
const TAG_INFO_REQ_PRODUCTION_DATE = 0x0A000002;
const TAG_INFO_REQ_MODULES_SW_VERSIONS = 0x0A000003;
const TAG_INFO_REQ_A35_SERIAL_NUMBER = 0x0A000007;
const TAG_INFO_REQ_IP_ADDRESS = 0x0A000008;
const TAG_INFO_REQ_SUBNET_MASK = 0x0A000009;
const TAG_INFO_REQ_MAC_ADDRESS = 0x0A00000A;
const TAG_INFO_REQ_GATEWAY = 0x0A00000B;
const TAG_INFO_REQ_DNS = 0x0A00000C;
const TAG_INFO_REQ_DHCP_STATUS = 0x0A00000D;
const TAG_INFO_REQ_TIME = 0x0A00000E;
const TAG_INFO_REQ_UTC_TIME = 0x0A00000F;
const TAG_INFO_REQ_TIME_ZONE = 0x0A000010;
const TAG_INFO_REQ_INFO = 0x0A000011;
const TAG_INFO_REQ_SET_IP_ADDRESS = 0x0A000012;
const TAG_INFO_REQ_SET_SUBNET_MASK = 0x0A000013;
const TAG_INFO_REQ_SET_DHCP_STATUS = 0x0A000014;
const TAG_INFO_REQ_SET_GATEWAY = 0x0A000015;
const TAG_INFO_REQ_SET_DNS = 0x0A000016;
const TAG_INFO_REQ_SET_TIME_ZONE = 0x0A000018;
const TAG_INFO_REQ_SW_RELEASE = 0x0A000019;
const TAG_INFO_SERIAL_NUMBER = 0x0A800001;
const TAG_INFO_PRODUCTION_DATE = 0x0A800002;
const TAG_INFO_MODULES_SW_VERSIONS = 0x0A800003;
const TAG_INFO_MODULE_SW_VERSION = 0x0A800004;
const TAG_INFO_MODULE = 0x0A800005;
const TAG_INFO_VERSION = 0x0A800006;
const TAG_INFO_A35_SERIAL_NUMBER = 0x0A800007;
const TAG_INFO_IP_ADDRESS = 0x0A800008;
const TAG_INFO_SUBNET_MASK = 0x0A800009;
const TAG_INFO_MAC_ADDRESS = 0x0A80000A;
const TAG_INFO_GATEWAY = 0x0A80000B;
const TAG_INFO_DNS = 0x0A80000C;
const TAG_INFO_DHCP_STATUS = 0x0A80000D;
const TAG_INFO_TIME = 0x0A80000E;
const TAG_INFO_UTC_TIME = 0x0A80000F;
const TAG_INFO_TIME_ZONE = 0x0A800010;
const TAG_INFO_INFO = 0x0A800011;
const TAG_INFO_SET_IP_ADDRESS = 0x0A800012;
const TAG_INFO_SET_SUBNET_MASK = 0x0A800013;
const TAG_INFO_SET_DHCP_STATUS = 0x0A800014;
const TAG_INFO_SET_GATEWAY = 0x0A800015;
const TAG_INFO_SET_DNS = 0x0A800016;
const TAG_INFO_SET_TIME = 0x0A800017;
const TAG_INFO_SET_TIME_ZONE = 0x0A800018;
const TAG_INFO_SW_RELEASE = 0x0A800019;
const TAG_INFO_GENERAL_ERROR = 0x0AFFFFFF;
const TAG_EP_REQ_IS_READY_FOR_SWITCH = 0x0B000003;
const TAG_EP_REQ_IS_GRID_CONNECTED = 0x0B000004;
const TAG_EP_REQ_IS_ISLAND_GRID = 0x0B000005;
const TAG_EP_REQ_IS_INVALID_STATE = 0x0B000006;
const TAG_EP_REQ_IS_POSSIBLE = 0x0B000007;
const TAG_EP_IS_READY_FOR_SWITCH = 0x0B800003;
const TAG_EP_IS_GRID_CONNECTED = 0x0B800004;
const TAG_EP_IS_ISLAND_GRID = 0x0B800005;
const TAG_EP_IS_INVALID_STATE = 0x0B800006;
const TAG_EP_IS_POSSIBLE = 0x0B800007;
const TAG_EP_GENERAL_ERROR = 0x0BFFFFFF;
const TAG_DB_REQ_HISTORY_DATA_DAY = 0x06000100;
const TAG_DB_REQ_HISTORY_TIME_START = 0x06000101;
const TAG_DB_REQ_HISTORY_TIME_INTERVAL = 0x06000102;
const TAG_DB_REQ_HISTORY_TIME_SPAN = 0x06000103;
const TAG_DB_REQ_HISTORY_DATA_WEEK = 0x06000200;
const TAG_DB_REQ_HISTORY_DATA_MONTH = 0x06000300;
const TAG_DB_REQ_HISTORY_DATA_YEAR = 0x06000400;
const TAG_DB_SUM_CONTAINER = 0x06800010;
const TAG_DB_VALUE_CONTAINER = 0x06800020;
const TAG_DB_GRAPH_INDEX = 0x06800001;
const TAG_DB_BAT_POWER_IN = 0x06800002;
const TAG_DB_BAT_POWER_OUT = 0x06800003;
const TAG_DB_DC_POWER = 0x06800004;
const TAG_DB_GRID_POWER_IN = 0x06800005;
const TAG_DB_GRID_POWER_OUT = 0x06800006;
const TAG_DB_CONSUMPTION = 0x06800007;
const TAG_DB_PM_0_POWER = 0x06800008;
const TAG_DB_PM_1_POWER = 0x06800009;
const TAG_DB_BAT_CHARGE_LEVEL = 0x0680000A;
const TAG_DB_BAT_CYCLE_COUNT = 0x0680000B;
const TAG_DB_CONSUMED_PRODUCTION = 0x0680000C;
const TAG_DB_AUTARKY = 0x0680000D;
const TAG_DB_HISTORY_DATA_DAY = 0x06800100;
const TAG_DB_HISTORY_DATA_WEEK = 0x06800200;
const TAG_DB_HISTORY_DATA_MONTH = 0x06800300;
const TAG_DB_HISTORY_DATA_YEAR = 0x06800400;
const TAG_DB_PAR_TIME_MIN = 0x06B00000;
const TAG_DB_PAR_TIME_MAX = 0x06B00001;
const TAG_DB_PARAM_ROW = 0x06B00002;
const TAG_DB_PARAM_COLUMN = 0x06B00003;
const TAG_DB_PARAM_INDEX = 0x06B00004;
const TAG_DB_PARAM_VALUE = 0x06B00005;
const TAG_DB_PARAM_MAX_ROWS = 0x06B00006;
const TAG_DB_PARAM_TIME = 0x06B00007;
const TAG_DB_PARAM_VERSION = 0x06B00008;
const TAG_DB_PARAM_HEADER = 0x06B00009;
const TAG_SYS_REQ_SYSTEM_REBOOT = 0x0C000001;
const TAG_SYS_SYSTEM_REBOOT = 0x0C800001;
const TAG_SYS_REQ_IS_SYSTEM_REBOOTING = 0x0C000002;
const TAG_SYS_IS_SYSTEM_REBOOTING = 0x0C800002;
const TAG_SYS_REQ_RESTART_APPLICATION = 0x0C000003;
const TAG_SYS_RESTART_APPLICATION = 0x0C800003;
const TAG_SYS_SCRIPT_FILE = 0x0C800011;
const TAG_SYS_GENERAL_ERROR = 0x0CFFFFFF;
const TAG_UM_REQ_UPDATE_STATUS = 0x0D000001;
const TAG_UM_UPDATE_STATUS = 0x0D800001;
const TAG_UM_REQ_CHECK_FOR_UPDATES = 0x0D000003;
const TAG_UM_CHECK_FOR_UPDATES = 0x0D800003;
const TAG_UM_GENERAL_ERROR = 0x0DFFFFFF;
const TAG_WB_REQ_DATA = 0x0E040000;
const TAG_WB_INDEX = 0x0E040001;
const TAG_WB_DATA = 0x0E840000;
const TAG_WB_REQ_ENERGY_ALL = 0x0E000001;
const TAG_WB_REQ_ENERGY_SOLAR = 0x0E000002;
const TAG_WB_REQ_SOC = 0x0E000003;
const TAG_WB_REQ_STATUS = 0x0E000004;
const TAG_WB_REQ_ERROR_CODE = 0x0E000005;
const TAG_WB_REQ_MODE = 0x0E000006;
const TAG_WB_REQ_APP_SOFTWARE = 0x0E000007;
const TAG_WB_REQ_BOOTLOADER_SOFTWARE = 0x0E000008;
const TAG_WB_REQ_HW_VERSION = 0x0E000009;
const TAG_WB_REQ_FLASH_VERSION = 0x0E00000A;
const TAG_WB_REQ_DEVICE_ID = 0x0E00000B;
const TAG_WB_REQ_DEVICE_STATE = 0x0E060000;
const TAG_WB_REQ_PM_POWER_L1 = 0x0E00000C;
const TAG_WB_REQ_PM_POWER_L2 = 0x0E00000D;
const TAG_WB_REQ_PM_POWER_L3 = 0x0E00000E;
const TAG_WB_REQ_PM_ACTIVE_PHASES = 0x0E00000F;
const TAG_WB_REQ_PM_MODE = 0x0E000011;
const TAG_WB_REQ_PM_ENERGY_L1 = 0x0E000012;
const TAG_WB_REQ_PM_ENERGY_L2 = 0x0E000013;
const TAG_WB_REQ_PM_ENERGY_L3 = 0x0E000014;
const TAG_WB_REQ_PM_DEVICE_ID = 0x0E000015;
const TAG_WB_REQ_PM_ERROR_CODE = 0x0E000016;
const TAG_WB_REQ_PM_DEVICE_STATE = 0x0E000029;
const TAG_WB_REQ_PM_FIRMWARE_VERSION = 0x0E000017;
const TAG_WB_REQ_DIAG_INFOS = 0x0E00001F;
const TAG_WB_REQ_DIAG_WARNINGS = 0x0E000020;
const TAG_WB_REQ_DIAG_ERRORS = 0x0E000021;
const TAG_WB_REQ_DIAG_TEMP_1 = 0x0E000022;
const TAG_WB_REQ_DIAG_TEMP_2 = 0x0E000023;
const TAG_WB_ENERGY_ALL = 0x0E800001;
const TAG_WB_ENERGY_SOLAR = 0x0E800002;
const TAG_WB_SOC = 0x0E800003;
const TAG_WB_STATUS = 0x0E800004;
const TAG_WB_ERROR_CODE = 0x0E800005;
const TAG_WB_MODE = 0x0E800006;
const TAG_WB_APP_SOFTWARE = 0x0E800007;
const TAG_WB_BOOTLOADER_SOFTWARE = 0x0E800008;
const TAG_WB_HW_VERSION = 0x0E800009;
const TAG_WB_FLASH_VERSION = 0x0E80000A;
const TAG_WB_DEVICE_ID = 0x0E80000B;
const TAG_WB_DEVICE_STATE = 0x0E860000;
const TAG_WB_DEVICE_CONNECTED = 0x0E860001;
const TAG_WB_DEVICE_WORKING = 0x0E860002;
const TAG_WB_DEVICE_IN_SERVICE = 0x0E860003;
const TAG_WB_GENERAL_ERROR = 0x0EFFFFFF;
const TAG_WB_PM_POWER_L1 = 0x0E80000C;
const TAG_WB_PM_POWER_L2 = 0x0E80000D;
const TAG_WB_PM_POWER_L3 = 0x0E80000E;
const TAG_WB_PM_ACTIVE_PHASES = 0x0E80000F;
const TAG_WB_PM_MODE = 0x0E800011;
const TAG_WB_PM_ENERGY_L1 = 0x0E800012;
const TAG_WB_PM_ENERGY_L2 = 0x0E800013;
const TAG_WB_PM_ENERGY_L3 = 0x0E800014;
const TAG_WB_PM_DEVICE_ID = 0x0E800015;
const TAG_WB_PM_ERROR_CODE = 0x0E800016;
const TAG_WB_PM_DEVICE_STATE = 0x0E800029;
const TAG_WB_PM_DEVICE_STATE_CONNECTED = 0x0E800030;
const TAG_WB_PM_DEVICE_STATE_WORKING = 0x0E800031;
const TAG_WB_PM_DEVICE_STATE_IN_SERVICE = 0x0E800032;
const TAG_WB_PM_FIRMWARE_VERSION = 0x0E800017;
const TAG_WB_DIAG_INFOS = 0x0E80001F;
const TAG_WB_DIAG_WARNINGS = 0x0E800020;
const TAG_WB_DIAG_ERRORS = 0x0E800021;
const TAG_WB_DIAG_TEMP_1 = 0x0E800022;
const TAG_WB_DIAG_TEMP_2 = 0x0E800023;
const TAG_WB_REQ_AVAILABLE_SOLAR_POWER = 0x0E041000;
const TAG_WB_POWER = 0x0E041001;
const TAG_WB_STATUS_BIT = 0x0E041002;
const TAG_WB_AVAILABLE_SOLAR_POWER = 0x0E841000;
const TAG_WB_REQ_SET_MODE = 0x0E000030;
const TAG_WB_MODE_PARAM_MODE = 0x0E040031;
const TAG_WB_MODE_PARAM_MAX_CURRENT = 0x0E040032;
const TAG_WB_SET_MODE = 0x0E000031;
const TAG_WB_REQ_SET_EXTERN = 0x0E041010;
const TAG_WB_SET_EXTERN = 0x0E841010;
const TAG_WB_EXTERN_DATA = 0x0E042010;
const TAG_WB_EXTERN_DATA_LEN = 0x0E042011;
const TAG_WB_REQ_EXTERN_DATA_SUN = 0x0E041011;
const TAG_WB_REQ_EXTERN_DATA_NET = 0x0E041012;
const TAG_WB_REQ_EXTERN_DATA_ALL = 0x0E041013;
const TAG_WB_REQ_EXTERN_DATA_ALG = 0x0E041014;
const TAG_WB_EXTERN_DATA_SUN = 0x0E841011;
const TAG_WB_EXTERN_DATA_NET = 0x0E841012;
const TAG_WB_EXTERN_DATA_ALL = 0x0E841013;
const TAG_WB_EXTERN_DATA_ALG = 0x0E841014;
const TAG_WB_REQ_SET_BAT_CAPACITY = 0x0E041015;
const TAG_WB_REQ_SET_PARAM_1 = 0x0E041018;
const TAG_WB_REQ_SET_PARAM_2 = 0x0E041019;
const TAG_WB_SET_BAT_CAPACITY = 0x0E841015;
const TAG_WB_SET_PARAM_1 = 0x0E841018;
const TAG_WB_SET_PARAM_2 = 0x0E841019;
const TAG_WB_REQ_PARAM_2 = 0x0E04101A;
const TAG_WB_RSP_PARAM_2 = 0x0E84101A;
const TAG_WB_REQ_PARAM_1 = 0x0E04101B;
const TAG_WB_RSP_PARAM_1 = 0x0E84101B;

// Credentials for s10.e3dc.com - TODO: store in config, encrypt password
const PORTAL_USER = "name@site.org";
const PORTAL_PASSWORD = "********";

// E3/DC server - TODO: store in config, encrypt password
const SERVER_IP = "192.168.178.1";
const SERVER_PORT = 5033;
const RSCP_PASSWORD = "********";

// Encryption setup
// NOTE: E3/DC uses 256 bit block-size, which ist _not_ covered by AES standard.
// It seems that Rijndael CBC with 256 bit block-size does fit.
const BLOCK_SIZE = 32;
const KEY_SIZE = 32;

/*
 * Created with @iobroker/create-adapter v1.31.0
 */

// The adapter-core module gives you access to the core ioBroker functions
// you need to create an adapter
const utils = require("@iobroker/adapter-core");

// Load your modules here, e.g.:
// const fs = require('fs');
const Rijndael = require("rijndael-js");
const Net = require("net");
const Frame = require("./lib/frame.js");
class E3dcRscp extends utils.Adapter {

	/**
	 * @param {Partial<utils.AdapterOptions>} [options={}]
	 */
	constructor(options) {
		super({
			...options,
			name: "e3dc-rscp",
		});
		this.on("ready", this.onReady.bind(this));
		this.on("stateChange", this.onStateChange.bind(this));
		// this.on('objectChange', this.onObjectChange.bind(this));
		// this.on('message', this.onMessage.bind(this));
		this.on("unload", this.onUnload.bind(this));
	}

	/**
	 * Is called when databases are connected and adapter received configuration.
	 */
	async onReady() {
		// Initialize your adapter here
		const aesKey = Buffer.alloc( KEY_SIZE, 0xFF );
		const cipher = new Rijndael(aesKey, "cbc");
		const encryptionIV = Buffer.alloc( BLOCK_SIZE, 0xFF );
		const decryptionIV = Buffer.alloc( BLOCK_SIZE, 0xFF );
		if( aesKey.write( RSCP_PASSWORD ) > RSCP_PASSWORD.length ) this.log.info("ERROR initializing AES-KEY!");
		this.log.debug( "encryptionIV: " + encryptionIV.toString("hex") );
		this.log.debug( "decryptionIV: " + decryptionIV.toString("hex") );
		this.log.debug( "aesKey:       " + aesKey.toString("hex") );

		// The adapters config (in the instance object everything under the attribute 'native') is accessible via
		// this.config:
		//this.log.info('config option1: ' + this.config.option1);
		//this.log.info('config option2: ' + this.config.option2);

		const tcpConnection = Net.createConnection( SERVER_PORT, SERVER_IP, () => {
			this.log.debug("\n(1) tcpConnection is established!");
		});

		tcpConnection.on("data", (data) => {
			this.log.info("\nReceived response");
			const decryptedData = Buffer.from(cipher.decrypt(data, 256, decryptionIV));
			// last encrypted block will be used as IV for next frame
			data.copy( decryptionIV, 0, data.length - BLOCK_SIZE );
			Frame.display(decryptedData);
		});

		tcpConnection.on("close", () => {
			this.log.info("Connection closed");
		});

		tcpConnection.on("end", () => {
			this.log.info("Disconnected from server");
		});

		/*
		For every state in the system there has to be also an object of type state
		Here a simple template for a boolean variable named 'testVariable'
		Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables
		*/
		await this.setObjectNotExistsAsync("testVariable", {
			type: "state",
			common: {
				name: "testVariable",
				type: "boolean",
				role: "indicator",
				read: true,
				write: true,
			},
			native: {},
		});

		// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.
		this.subscribeStates("testVariable");
		// You can also add a subscription for multiple states. The following line watches all states starting with 'lights.'
		// this.subscribeStates('lights.*');
		// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:
		// this.subscribeStates('*');

		/*
			setState examples
			you will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)
		*/
		// the variable testVariable is set to true as command (ack=false)
		await this.setStateAsync("testVariable", true);

		// same thing, but the value is flagged 'ack'
		// ack should be always set to true if the value is received from or acknowledged from the target system
		await this.setStateAsync("testVariable", { val: true, ack: true });

		// same thing, but the state is deleted after 30s (getState will return null afterwards)
		await this.setStateAsync("testVariable", { val: true, ack: true, expire: 30 });

		// examples for the checkPassword/checkGroup functions
		let result = await this.checkPasswordAsync("admin", "iobroker");
		this.log.info("check user admin pw iobroker: " + result);

		result = await this.checkGroupAsync("admin", "admin");
		this.log.info("check group user admin group admin: " + result);
	}

	/**
	 * Is called when adapter shuts down - callback has to be called under any circumstances!
	 * @param {() => void} callback
	 */
	onUnload(callback) {
		try {
			// Here you must clear all timeouts or intervals that may still be active
			// clearTimeout(timeout1);
			// clearTimeout(timeout2);
			// ...
			// clearInterval(interval1);

			callback();
		} catch (e) {
			callback();
		}
	}

	// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.
	// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.
	// /**
	//  * Is called if a subscribed object changes
	//  * @param {string} id
	//  * @param {ioBroker.Object | null | undefined} obj
	//  */
	// onObjectChange(id, obj) {
	// 	if (obj) {
	// 		// The object was changed
	// 		this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);
	// 	} else {
	// 		// The object was deleted
	// 		this.log.info(`object ${id} deleted`);
	// 	}
	// }

	/**
	 * Is called if a subscribed state changes
	 * @param {string} id
	 * @param {ioBroker.State | null | undefined} state
	 */
	onStateChange(id, state) {
		if (state) {
			// The state was changed
			this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);
		} else {
			// The state was deleted
			this.log.info(`state ${id} deleted`);
		}
	}

	// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.
	// /**
	//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...
	//  * Using this method requires 'common.messagebox' property to be set to true in io-package.json
	//  * @param {ioBroker.Message} obj
	//  */
	// onMessage(obj) {
	// 	if (typeof obj === 'object' && obj.message) {
	// 		if (obj.command === 'send') {
	// 			// e.g. send email or pushover or whatever
	// 			this.log.info('send command');

	// 			// Send response in callback if required
	// 			if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);
	// 		}
	// 	}
	// }

}

// @ts-ignore parent is a valid property on module
if (module.parent) {
	// Export the constructor in compact mode
	/**
	 * @param {Partial<utils.AdapterOptions>} [options={}]
	 */
	module.exports = (options) => new E3dcRscp(options);
} else {
	// otherwise start the instance directly
	new E3dcRscp();
}